/* ---------------------------------------------------------------------------------------------- */
// RunningAdmin_ohs.cpp
// EV3_HAL2016\デバイス制御\走行管理
// モータによる走行実行。モータ回転数の取得。バランス制御の使用。
/* ---------------------------------------------------------------------------------------------- */
// 番号    日付        氏名        更新履歴
/* ---------------------------------------------------------------------------------------------- */
// RN0000  2016/07/15  葛巻　大樹  新規作成
// RN0001  2016/07/17  大塚　信晶  コンパイルチェック単体テスト通過
// RN0002  2016/07/19  大塚　信晶  結合テスト通過
// RN0003  2016/08/18  大塚　信晶  バランス再起動に関する
// RN0004  2016/09/16  大塚　信晶  高速バランス走行対策＠ブレーキ挙動
/* ---------------------------------------------------------------------------------------------- */

/* ---------------------------------------------------------------------------------------------- */
// includeファイル
/* ---------------------------------------------------------------------------------------------- */

#include "hal_ev3_std.h"
#include "RunningAdmin_ohs.h"

/* ---------------------------------------------------------------------------------------------- */
// クラス名     : RunningAdmin_ohs
// 役割名       : 走行モータ管理
// 役割概要     : 走行モータへの指示・現在回転量の管理
// 作成日       : 2016/07/15  葛巻　大樹  新規作成
/* 引数 ----------------------------------------------------------------------------------------- */
// [I/O]ev3api::Motor& leftwheel  : ev3apiモータの使用＠左
// [I/O]ev3api::Motor& rightwheel : ev3apiモータの使用＠右
// [I/O]Balancer_ohs*  balancer   : 倒立振子バランス計算
/* ---------------------------------------------------------------------------------------------- */
RunningAdmin_ohs::RunningAdmin_ohs( ev3api::Motor& leftwheel, ev3api::Motor& rightwheel,  Balancer_ohs* balancer )
:mLeftWheel( leftwheel ),  /* 左モータ入出力＠コンストラクタ優先処理 */
 mRightWheel( rightwheel ),/* 右モータ入出力＠コンストラクタ優先処理 */
 mBalancer( balancer )     /* 倒立振子計算用＠コンストラクタ優先処理 */
{
    mRightRotary = 0;
    mLeftRotary  = 0;
    mRightPwm    = 0;
    mLeftPwm     = 0;

    mFront    = 0;
    mTurn     = 0;
    mTurnOFS  = TURN_OFS;
    
    mBalanceF = false;// バランス制御＠無効
    mBrakeF   = true; // ブレーキ動作＠有効
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : ~RunningAdmin_ohs
// 機能名       : デストラクタ
// 機能概要     : オブジェクトの破棄
// 作成日       : 2016/07/15  葛巻　大樹  新規作成
/* ---------------------------------------------------------------------------------------------- */
RunningAdmin_ohs::~RunningAdmin_ohs() {}

/* パブリック ----------------------------------------------------------------------------------- */

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : callValueUpdate
// 機能名       : モータ回転数の更新
// 機能概要     : 左右モータ回転数の取得
// 作成日       : 2016/07/15  葛巻　大樹  新規作成
/* ---------------------------------------------------------------------------------------------- */
void RunningAdmin_ohs::callValueUpDate()
{
    mRightRotary = mRightWheel.getCount( );
    mLeftRotary  = mLeftWheel.getCount( );
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : postRunning
// 機能名       : 走行指示
// 機能概要     : 走行の指示を行う。実行（モータへのパラメータ操作）は行われない。
// 作成日       : 2016/07/15  葛巻　大樹  新規作成
/* 引数 ----------------------------------------------------------------------------------------- */
// [I N]int32_t speed : 指示走行速度
// [I N]int32_t deg   : 指示旋回量
// [I N]BOOL balancer : バランス制御有無
// [I N]BOOL brake   : ブレーキ制御有無
/* ---------------------------------------------------------------------------------------------- */
void RunningAdmin_ohs::postRunning( int32_t speed, int32_t deg, BOOL balancer, BOOL brake )
{
    /* 指示値の登録 ----------------------------------------------------------------------------- */
    mFront    = (int8_t)speed;
    mTurn     = (int8_t)deg;
    mBalanceF = balancer;
    mBrakeF   = brake;
    // 引数チェックよろ
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : setTurnOffset
// 機能名       : 左右モータオフセット＠デバック用
// 機能概要     : 左右モータの個体差保管用のオフセットを登録する。（使用不可＠分解能問題）
// 作成日       : 2016/09/16  大塚　信晶  新規作成
/* 引数 ----------------------------------------------------------------------------------------- */
// [I N]int8_t offset : オフセット値＠-5～5
/* 戻り値 [bool] -------------------------------------------------------------------------------- */
// true :正常終了
// false:引数異常
/* ---------------------------------------------------------------------------------------------- */
bool RunningAdmin_ohs::setTurnOffset ( int8_t offset  )
{
    /* 引数チェック ----------------------------------------------------------------------------- */
    if(( offset > 5 ) || ( offset > -5 )) { return false; }// 範囲チェック

    mTurnOFS = offset;// オフセット登録

    return true;
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : getTurnOffset
// 機能名       : オフセット値返却＠デバック用
// 機能概要     : 左右モータの個体差保管用のオフセットを取得する。（使用不可＠分解能問題）
// 作成日       : 2016/09/16  大塚　信晶  新規作成
/* 戻り値 [int8_t] ------------------------------------------------------------------------------ */
// 範囲指定無し :オフセット値
/* ---------------------------------------------------------------------------------------------- */
int8_t RunningAdmin_ohs::getTurnOffset () { return mTurnOFS; }

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : callRunning
// 機能名       : 走行実行
// 機能概要     : postRunningメソッドにて登録されたパラメータ値でモータ動作を実行する
// 作成日       : 2016/07/15  葛巻　大樹  新規作成
/* ---------------------------------------------------------------------------------------------- */
void RunningAdmin_ohs::callRunning()
{
    /* 変数宣言 --------------------------------------------------------------------------------- */
    static FLOT fBrake = BRAKE_INI;// ブレーキ量
    static FLOT fDiv = 0.0F;       // ブレーキ開始速度->目標速度＠分解値
    static int8_t cFrontOld = 0.0F;// 指示速度記録
    int8_t cFront_    = 0;// 走行速度一時保持
    int8_t cRighitOfs = 0;// 右モータオフセット
    int8_t cLeftOfs   = 0;// 左モータオフセット

    /* ------------------------------------------------------------------------------------------ */
    // 速度ブレーキ制御
    /* ------------------------------------------------------------------------------------------ */
    /* 指示速度変更判断 ------------------------------------------------------------------------- */
    if( mFront != cFrontOld ) {
        fBrake = BRAKE_INI;// ブレーキ量を初期化
        fDiv = ( FLOT )( mFront - cFrontOld );// 目標速度値までの分解値を計算
        cFrontOld = mFront;// 指示速度を記録
    }
    /* ブレーキ効果付与 */
    if( fBrake > BRAKE_MAX ) { fBrake -= BRAKE_ADD; }

    /* ブレーキ有無確認 */
    if( mBrakeF ) { cFront_ = mFront - ( int8_t )( fDiv * fBrake ); }// ブレーキ有り
    else { cFront_ = mFront; }// ブレーキ無し

    /* ------------------------------------------------------------------------------------------ */
    // バランス制御
    /* ------------------------------------------------------------------------------------------ */
    /* バランス制御有無確認 --------------------------------------------------------------------- */
    if( mBalanceF ) {
        // バランス有り
        mBalancer->calcPWM( cFront_, mTurn, this );// バランス計算
        mRightPwm = mBalancer->isRightPWM( );// 計算値の取得
        mLeftPwm  = mBalancer->isLeftPWM( ); // 計算値の取得
    } else {
        // バランス無し
        mBalancer->init();// バランス計算リセット
        mRightPwm = cFront_ - mTurn;// 指示走行値をモータ実効値に変換
        mLeftPwm  = cFront_ + mTurn;// 指示走行値をモータ実効値に変換
    }

    /* ------------------------------------------------------------------------------------------ */
    // 走行実行処理
    /* ------------------------------------------------------------------------------------------ */
    /* オフセット計算 */
    if( mTurnOFS > 0  ) {
        cRighitOfs -= mTurnOFS;
    } else {
        cLeftOfs   += mTurnOFS;
    }
    mRightPwm = mRightPwm + cRighitOfs;
    mLeftPwm  = mLeftPwm  + cLeftOfs;

    /* 走行実効値の範囲確認（変更するかも） ----------------------------------------------------- */
    if( mRightPwm > PWM_MAX ) {
        mRightPwm = PWM_MAX;
    } else if( mRightPwm < -PWM_MAX ) {
        mRightPwm = -PWM_MAX;
    }
    if( mLeftPwm > PWM_MAX ) {
        mLeftPwm = PWM_MAX;
    } else if( mLeftPwm < -PWM_MAX ) {
        mLeftPwm = -PWM_MAX;
    } // 変更するかもここまで
    
    mLeftWheel.setPWM( mLeftPwm );  // 左モータ回転実行
    mRightWheel.setPWM( mRightPwm );// 右モータ回転実行
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : getMileage
// 機能名       : 総走行量の取得
// 機能概要     : 左右モータの総回転量の平均値を総回転量として出力
// 作成日       : 2016/07/15  葛巻　大樹  新規作成
/* 戻り値 [int32_t] ----------------------------------------------------------------------------- */
// 範囲指定無し :総回転量
/* ---------------------------------------------------------------------------------------------- */
int32_t RunningAdmin_ohs::getMileage ( )
{
    return (( mRightRotary + mLeftRotary ) / 2 );
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : getAngle
// 機能名       : 旋回量の取得
// 機能概要     : 左右モータの回転量の差を旋回量として出力
// 作成日       : 2016/07/15  葛巻　大樹  新規作成
/* 戻り値 [int32_t] ----------------------------------------------------------------------------- */
// 範囲指定無し :総回転量
/* ---------------------------------------------------------------------------------------------- */
int32_t RunningAdmin_ohs::getAngle ( )
{
    return mLeftRotary - mRightRotary;
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : getSpeed
// 機能名       : 走行速度の取得
// 機能概要     : 左右モータ走行指示値の和を割ったものを走行速度とし出力
// 作成日       : 2016/07/15  葛巻　大樹  新規作成
/* 戻り値 [int8_t] ------------------------------------------------------------------------------ */
// 範囲指定無し :総回転量
/* ---------------------------------------------------------------------------------------------- */
int8_t RunningAdmin_ohs::getSpeed ( )
{
    return (( mRightPwm + mLeftPwm ) / 2 );
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : getVector
// 機能名       : 旋回量の取得
// 機能概要     : 左右モータ走行指示値の差を旋回量とし出力
// 作成日       : 2016/07/15  葛巻　大樹  新規作成
/* 戻り値 [int8_t] ------------------------------------------------------------------------------ */
// 範囲指定無し :総回転量
/* ---------------------------------------------------------------------------------------------- */
int8_t RunningAdmin_ohs::getVector ( )
{
    return ( mRightPwm - mLeftPwm );
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : isRightRotary
// 機能名       : 右走行実効値の取得
// 機能概要     : 右走行実効値を出力
// 作成日       : 2016/07/15  葛巻　大樹  新規作成
/* 戻り値 [int32_t] ----------------------------------------------------------------------------- */
// 範囲指定無し :総回転量
/* ---------------------------------------------------------------------------------------------- */
int32_t RunningAdmin_ohs::isRightRotary ( )
{
    return mRightRotary;
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : isLeftRotary
// 機能名       : 左走行実効値の取得
// 機能概要     : 左走行実効値を出力
// 作成日       : 2016/07/15  葛巻　大樹  新規作成
/* 戻り値 [int32_t] ----------------------------------------------------------------------------- */
// 範囲指定無し :総回転量
/* ---------------------------------------------------------------------------------------------- */
int32_t RunningAdmin_ohs::isLeftRotary ( )
{
    return mLeftRotary;
}

/* ---------------------------------------------------------------------------------------------- */
/*                          Copyright HAL College of Technology & Design                          */
/* ---------------------------------------------------------------------------------------------- */
