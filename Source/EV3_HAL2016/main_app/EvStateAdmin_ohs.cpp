/* ---------------------------------------------------------------------------------------------- */
// EvStateAdmin_ohs.cpp
// EV3_HAL2016\基本機能\本体状態管理
// 状態遷移に必要なセンサ値の管理・取得。遷移間の偏差から遷移条件を計測する。
/* ---------------------------------------------------------------------------------------------- */
// 番号    日付        氏名        更新履歴
/* ---------------------------------------------------------------------------------------------- */
// EV0000  2016/08/03  上野　徹    新規作成
// EV0001  2016/08/16  大塚　信晶  クラス名の変更、コード修正
/* ---------------------------------------------------------------------------------------------- */

/* ---------------------------------------------------------------------------------------------- */
// includeファイル
/* ---------------------------------------------------------------------------------------------- */

#include <string.h>			// memset用
#include "hal_ev3_std.h"
#include "EvStateAdmin_ohs.h"

// extern FILE* gBtHandle;//デバッグ用

/* ---------------------------------------------------------------------------------------------- */
// クラス名     : EvStateAdmin_ohs
// 役割名       : 本体状態管理
// 役割概要     : 本体状態を各クラスから取得し、記録する。状態の切り替わりごとに値を保持し、
//                状態遷移条件を計測する。
// 作成日       : 2016/08/03  上野　徹    新規作成
/* 引数 ----------------------------------------------------------------------------------------- */
// [I N]RayReflectAdmin_ohs* ray_reflect_admin : 光学センサ値取得用
// [I N]GyroAdmin_ohs* gyro_admin              : 角加速度取得用
// [I N]RunningAdmin_ohs* running_admin        : 走行量取得用
// [I N]TailAdmin_ohs* tail_admin              : 尻尾角取得用
/* ---------------------------------------------------------------------------------------------- */
EvStateAdmin_ohs::EvStateAdmin_ohs( RayReflectAdmin_ohs* ray_reflect_admin, GyroAdmin_ohs* gyro_admin, RunningAdmin_ohs* running_admin, TailAdmin_ohs* tail_admin )
:mRayReflectAdmin ( ray_reflect_admin ),/* 光学センサ（ライン色）＠コンストラクタ優先処理 */
 mGyroAdmin( gyro_admin ),/* ジャイロ（安定状態）＠コンストラクタ優先処理 */
 mRunningAdmin( running_admin ),/* 走行量・方向＠コンストラクタ優先処理 */
 mTailAdmin( tail_admin )/* 尻尾角度＠コンストラクタ優先処理 */
 {
	/* 現本体状態構造体初期化 */
	memset( &mNowState, 0, sizeof( EV3_STATE ));
	/* 旧本体状態構造体初期化 */
	memset( &mOldState, 0, sizeof( EV3_STATE ));
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : ~EvStateAdmin_ohs
// 機能名       : デストラクタ
// 機能概要     : オブジェクトの破棄
// 作成日       : 2016/08/03  上野　徹    新規作成
/* ---------------------------------------------------------------------------------------------- */
EvStateAdmin_ohs::~EvStateAdmin_ohs() {}

/* パブリック ----------------------------------------------------------------------------------- */

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : setStateCollection
// 機能名       : 本体状態の更新
// 機能概要     : 各オブジェクトから本体状態に関わる情報を収集する。
// 作成日       : 2016/08/03  上野　徹    新規作成
/* 戻り値 [bool] -------------------------------------------------------------------------------- */
// true :本体状態の変更有り
// false:本体状態の変更無し
/* ---------------------------------------------------------------------------------------------- */
bool EvStateAdmin_ohs::setStateCollection()
{
	EV3_STATE tmpState;// 本体状態一時保存領域

	memset( &tmpState, 0, sizeof(EV3_STATE));// クリア

	/* 本体状態の収集＠一時保存 */
	tmpState.mileage  = mRunningAdmin->getMileage();
	tmpState.ev3_deg  = mRunningAdmin->getAngle();
	tmpState.Tail_deg = mTailAdmin->getTailDegree();
	tmpState.color    = mRayReflectAdmin->getState();
	tmpState.balance  = mGyroAdmin->getState();

	/* 状態の変更確認 ＠未変更＝終了 */
	// if( memcmp( &mNowState, &tmpState, sizeof( EV3_STATE )) == true ) { return false; }
	for( UINT i = 0; i < sizeof( EV3_STATE ); i++ ) {
		if(( *(( UCHR* )(&mNowState) + i )) != ( *(( UCHR* )(&tmpState ) + i ))) { break; }
		if( i == ( sizeof( EV3_STATE ) - 1 )) { return false; }
	}// memcmpの挙動が微妙なので自分で書きました。やりたいことの意図はおなじです

	/* 本体状態の一斉取得＠一時保存領域からの移動 */
	mNowState.mileage  = tmpState.mileage;
	mNowState.ev3_deg  = tmpState.ev3_deg;
	mNowState.Tail_deg = tmpState.Tail_deg;
	mNowState.color    = tmpState.color;
	mNowState.balance  = tmpState.balance;

#ifdef PRINT// デバック用LCD表示
	SCHR   cString[50];
	memset( cString , 0, sizeof(cString));
	sprintf(( char* )cString, "mileage [%6d]",(int)mNowState.mileage);
	ev3_lcd_draw_string( cString, 0, 8*7);
	sprintf(( char* )cString, "ev3_deg [%6d]",(int)mNowState.ev3_deg);
	ev3_lcd_draw_string( cString, 0, 8*8);
	sprintf(( char* )cString, "Tail_deg[%6d]",(int)mNowState.Tail_deg);
	ev3_lcd_draw_string( cString, 0, 8*9);
	sprintf(( char* )cString, "color   [%6d]",(int)mNowState.color);
	ev3_lcd_draw_string( cString, 0, 8*10);
	sprintf(( char* )cString, "balance [%6d]",(int)mNowState.balance);
	ev3_lcd_draw_string( cString, 0, 8*11);
#endif

	return true;// 本体状態が更新されて終了
}
/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : setStateRefresh
// 機能名       : EvStateAdmin_ohsに状態の切り替わりを通知する
// 機能概要     : 相対制御の値管理の為、現在値を保存する処理を行う。
// 作成日       : 2016/08/03  上野　徹    新規作成
/* ---------------------------------------------------------------------------------------------- */
void EvStateAdmin_ohs::setStateRefresh()
{
	//現在値を過去値へ
	mOldState = mNowState;
}
/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : getColorSensorState
// 機能名       : ラインカラー出力
// 機能概要     : mRayReflectAdminが検知したライン色を出力する
// 作成日       : 2016/08/03  上野　徹    新規作成
/* 戻り値 [SENC_CLR] ---------------------------------------------------------------------------- */
// カラー :hal_ev3_std.hに準ずる
/* ---------------------------------------------------------------------------------------------- */
SENC_CLR EvStateAdmin_ohs::getColorSensorState() {
	return mNowState.color;
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : getBalanceState
// 機能名       : 本体安定状態出力
// 機能概要     : mGyroAdminが検知した本体の安定状態を出力する
// 作成日       : 2016/08/03  上野　徹    新規作成
/* 戻り値 [GYRO_STATE] -------------------------------------------------------------------------- */
// 本体安定状態 :hal_ev3_std.hに準ずる
/* ---------------------------------------------------------------------------------------------- */
GYRO_STATE EvStateAdmin_ohs::getBalanceState() {
	return mNowState.balance;
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : getMileage
// 機能名       : 走行距離の出力
// 機能概要     : mRunningAdminが計測した走行距離を出力する。
//                走行距離はsetStateRefreshメソッド実行時点の相対値を出力する
// 作成日       : 2016/08/03  上野　徹    新規作成
/* 戻り値 [int32_t] ---------------------------------------------------------------------------- */
// -2,147,483,648 ～ 2,147,483,647:int32_t全範囲を使用する
/* ---------------------------------------------------------------------------------------------- */
int32_t EvStateAdmin_ohs::getMileage() {
	return ( mNowState.mileage - mOldState.mileage );
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : getBodyAngle
// 機能名       : 走行距離の出力
// 機能概要     : mRunningAdminが計測した走行方向を出力する。
//                走行方向はsetStateRefreshメソッド実行時点の相対値を出力する
// 作成日       : 2016/08/03  上野　徹    新規作成
/* 戻り値 [int32_t] ---------------------------------------------------------------------------- */
// -2,147,483,648 ～ 2,147,483,647:int32_t全範囲を使用する
/* ---------------------------------------------------------------------------------------------- */
int32_t EvStateAdmin_ohs::getBodyAngle() {
	return ( mNowState.ev3_deg - mOldState.ev3_deg );
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : getBodyAngle
// 機能名       : 走行距離の出力
// 機能概要     : mTailAdminが計測した尻尾角度を出力する。
// 作成日       : 2016/08/03  上野　徹    新規作成
/* 戻り値 [int32_t] ---------------------------------------------------------------------------- */
// -2,147,483,648 ～ 2,147,483,647:int32_t全範囲を使用する
/* ---------------------------------------------------------------------------------------------- */
int32_t EvStateAdmin_ohs::getTailAngle() {
	return mNowState.Tail_deg;
}

/* ---------------------------------------------------------------------------------------------- */
/*                          Copyright HAL College of Technology & Design                          */
/* ---------------------------------------------------------------------------------------------- */
