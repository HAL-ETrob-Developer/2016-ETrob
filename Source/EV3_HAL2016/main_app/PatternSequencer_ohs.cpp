/* ---------------------------------------------------------------------------------------------- */
// PatternSequencer_ohs.cpp
// EV3_HAL2016\基本機能\定量走行者
// 決められた順番・距離・角度で走行・旋回する
/* ---------------------------------------------------------------------------------------------- */
// 番号    日付        氏名        更新履歴
/* ---------------------------------------------------------------------------------------------- */
// PS0001  2016/08/06  上野　徹    新規作成
// PS0002  2016/08/15  上野　徹    レビュー調整
// PS0003  2016/08/20  大塚　信晶  設定ファイル対応化
/* ---------------------------------------------------------------------------------------------- */

/* ---------------------------------------------------------------------------------------------- */
// includeファイル
/* ---------------------------------------------------------------------------------------------- */

#include "hal_ev3_std.h"
#include "PatternSequencer_ohs.h"

/* ---------------------------------------------------------------------------------------------- */
// クラス名     : PatternSequencer_ohs
// 役割名       : パターンシーケンサ
// 役割概要     : あらかじめ用意したパラメータに従って各アクチュエータに動作指示を出す。
// 作成日       : 2016/08/06  上野　徹    新規作成
/* ---------------------------------------------------------------------------------------------- */
PatternSequencer_ohs::PatternSequencer_ohs( RunningAdmin_ohs* running_admin, TailAdmin_ohs* tail_admin )
:mRunningAdmin( running_admin ),/* 走行指示用＠コンストラクタ優先処理 */
 mTailAdmin( tail_admin )/* 尻尾指示用＠コンストラクタ優先処理 */
{
	/* パターン保存構造の体初期化 */
	memset( mPatternIndex, 0, sizeof( PATTERN_INDEX ));
	/* 初期値のセット */
	mPatternIndex[INIT_PAT_ID].speed    = INIT__SPEED;
	mPatternIndex[INIT_PAT_ID].ev3_deg  = INIT_EV_DEG;
	mPatternIndex[INIT_PAT_ID].Tail_deg = INIT_TL_DEG;
	mPatternIndex[INIT_PAT_ID].balance  = INIT_BALANC;

	mNowId = INIT_PAT_ID;// 現行パターンID＠初期化
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : ~PatternSequencer_ohs
// 機能名       : デストラクタ
// 機能概要     : オブジェクトの破棄
// 作成日       : 2016/08/06  上野　徹    新規作成
/* ---------------------------------------------------------------------------------------------- */
PatternSequencer_ohs::~PatternSequencer_ohs() {}

/* パブリック ----------------------------------------------------------------------------------- */

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : callPatternRunning
// 機能名       : パターン走行指示
// 機能概要     : パターン走行IDを指定し、走行を指示する
// 作成日       : 2016/08/06  上野　徹    新規作成
/* 引数 ----------------------------------------------------------------------------------------- */
// [I N]UCHR uc_index : 指示パターンID
/* 戻り値 [BOOL] -------------------------------------------------------------------------------- */
// true :正常終了
// false:異常終了
/* ---------------------------------------------------------------------------------------------- */
BOOL PatternSequencer_ohs::callPatternRunning( UCHR uc_index )
{
	/* ------------------------------------------------------------------------------------------ */
	// 変数宣言
	/* ------------------------------------------------------------------------------------------ */
	SCHR cSpeed   = 0;    // 走行速度
	SCHR cDegre   = 0;    // 旋回角度
	SCHR cTailD   = 0;    // 尻尾角度
	BOOL BalanceF = false;// バランス走行有無

	/* ------------------------------------------------------------------------------------------ */
	// 引数チェック
	/* ------------------------------------------------------------------------------------------ */
	if( uc_index >= PATTERN_NUM ) { return false; }//異常終了


	/* ------------------------------------------------------------------------------------------ */
	// パターン取得 -> 走行指示
	/* ------------------------------------------------------------------------------------------ */
	mNowId = uc_index;// 現行パターンの取得

	/* 外部メソッドへ渡す引数の準備 */
	cSpeed = mPatternIndex[mNowId].speed;
	cDegre = mPatternIndex[mNowId].ev3_deg;
	cTailD = mPatternIndex[mNowId].Tail_deg;
	if( mPatternIndex[mNowId].balance == TRUE ) { BalanceF = true; }// UCHR -> BOOL 変換

	/* 走行指示＠一定速度以上は疑似ブレーキ動作 ------------------------------------------------- */
	if( cSpeed > 50 ) {
		mRunningAdmin->postRunning( cSpeed, cDegre, BalanceF, true );// ブレーキ有り
	} else {
		mRunningAdmin->postRunning( cSpeed, cDegre, BalanceF, false );// ブレーキ無し
	}

	/* 尻角度指示 */
	mTailAdmin->postTailDegree( cTailD );

	return true;//正常終了
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : callSequencStop
// 機能名       : パターン走行停止指示
// 機能概要     : パターン走行を停止する
// 作成日       : 2016/08/06  上野　徹    新規作成
/* ---------------------------------------------------------------------------------------------- */
void PatternSequencer_ohs::callSequencStop()
{
	/* 走行指示 : しっぽはそのまま */
	mRunningAdmin->postRunning ( 0, 0, false, false );
	/* 尻角度指示 */
	mTailAdmin->postTailDegree( mPatternIndex[mNowId].Tail_deg );
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : setPatternIndex
// 機能名       : パターンインデックスの登録
// 機能概要     : パターン走行で使用するインデックスを登録する。
// 作成日       : 2016/08/20  大塚　信晶    新規作成
/* 引数 ----------------------------------------------------------------------------------------- */
// [I N]PATTERN_INDEX* p_pattern_index : 登録パターン
/* 戻り値 [BOOL] -------------------------------------------------------------------------------- */
// true :正常終了
// false:異常終了
/* ---------------------------------------------------------------------------------------------- */
BOOL PatternSequencer_ohs::setPatternIndex( PATTERN_INDEX* p_pattern_index )
{
	if( p_pattern_index == NULL ) { return false; }// ヌルポ
	//インデックスの取り込み
	memcpy( mPatternIndex, p_pattern_index, sizeof( mPatternIndex ));
	return true;
}

/* ---------------------------------------------------------------------------------------------- */
// メソッド名   : getID
// 機能名       : 現行IDの取得
// 機能概要     : 現行のパターンIDを出力する。
// 作成日       : 2016/08/20  大塚　信晶    新規作成
/* 戻り値 [UCHR] -------------------------------------------------------------------------------- */
// 0 ～ PATTERN_NUM : 現行パターンID
/* ---------------------------------------------------------------------------------------------- */
UCHR PatternSequencer_ohs::getID() { return mNowId; }

/* ---------------------------------------------------------------------------------------------- */
/*                          Copyright HAL College of Technology & Design                          */
/* ---------------------------------------------------------------------------------------------- */
